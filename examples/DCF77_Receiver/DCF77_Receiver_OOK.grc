options:
  parameters:
    author: henningM1R
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: DCF77_Receiver_OOK
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: DCF77 Receiver OOK
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: decimation
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [440, 16.0]
    rotation: 0
    state: true
- name: freq_DCF77
  id: variable
  parameters:
    comment: ''
    value: '77500'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 16.0]
    rotation: 0
    state: true
- name: gain1
  id: variable_qtgui_range
  parameters:
    comment: 'default real: 150

      default simulation: 1'
    gui_hint: ''
    label: Gain1
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '1'
    step: '1'
    stop: '30'
    value: '10.5'
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 4.0]
    rotation: 0
    state: true
- name: gain2
  id: variable_qtgui_range
  parameters:
    comment: 'default real: 290

      default simulation: 1'
    gui_hint: (2,0,1,1)
    label: Gain2
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '1'
    step: '0.5'
    stop: '30'
    value: '25'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1256, -4.0]
    rotation: 0
    state: true
- name: hi_thres
  id: variable_qtgui_range
  parameters:
    comment: 'Adapt the upper threshold

      so that the one value is provided

      each time the signal is high'
    gui_hint: (0,0,1,1)
    label: upper Threshold
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '500'
    value: '80'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 8.0]
    rotation: 0
    state: true
- name: lo_thres
  id: variable_qtgui_range
  parameters:
    comment: 'Adapt the upper threshold

      so that the one value is provided

      each time the signal is high'
    gui_hint: (1,0,1,1)
    label: lower Threshold
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.5'
    step: '0.1'
    stop: '50'
    value: '2.5'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 4.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '192000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 16.0]
    rotation: 0
    state: enabled
- name: variable_low_pass_filter_taps_0
  id: variable_low_pass_filter_taps
  parameters:
    beta: '6.76'
    comment: ''
    cutoff_freq: '1000'
    gain: '1.0'
    samp_rate: samp_rate
    width: '150'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 480.0]
    rotation: 0
    state: enabled
- name: analog_simple_squelch_cc_0
  id: analog_simple_squelch_cc
  parameters:
    affinity: ''
    alias: ''
    alpha: '1'
    comment: 'filter out low noise

      below given threshold'
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold: '-50'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1248, 352.0]
    rotation: 0
    state: enabled
- name: audio_sink_0
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: 'for listening to the

      DCF77-signal'
    device_name: ''
    num_inputs: '1'
    ok_to_block: 'True'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 976.0]
    rotation: 0
    state: disabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: Compute real-valued signal
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 1048.0]
    rotation: 0
    state: enabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: 'show the decoded

      message protocol

      (mostly with 0 and 1)

      just for local

      debugging purposes'
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 1424.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '150'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 344.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_1
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: Amplify signal
    const: gain2
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 360.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_1_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: Amplify signal
    const: gain1
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1760, 488.0]
    rotation: 0
    state: enabled
- name: blocks_threshold_ff_0
  id: blocks_threshold_ff
  parameters:
    affinity: ''
    alias: ''
    comment: 'Decide whether

      the received signal

      is a zero or a one'
    high: '125'
    init: '1'
    low: '2.5'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 1156.0]
    rotation: 0
    state: true
- name: freq_xlating_fir_filter_xxx_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: freq_DCF77
    comment: 'Demodulation from 77.5 kHz

      down to the base band.'
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: variable_low_pass_filter_taps_0
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [664, 652.0]
    rotation: 0
    state: disabled
- name: freq_xlating_fir_filter_xxx_0_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: '0'
    comment: 'Demodulation from 77.5 kHz

      down to the base band.'
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: variable_low_pass_filter_taps_0
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 332.0]
    rotation: 0
    state: enabled
- name: gr_bit_detector_DCF77
  id: epy_block
  parameters:
    _source_code: "\nimport numpy as np\nfrom gnuradio import gr\nimport pmt\n\n\n\
      # the DCF77 detector is initially out of sync\n_in_sync = 0\n# counted number\
      \ of one samples\n_num_ones = 0\n# counted number of zero samples\n_num_zeros\
      \ = 0\n\n\nclass DCF77_BitDetector_blk(gr.sync_block):\n\n    def __init__(self,\
      \ sample_rate=48000, tolerance=0.02):\n        gr.sync_block.__init__(\n   \
      \         self,\n            name='DCF77\\nBit Detector',\n            in_sig=[np.float32],\n\
      \            out_sig=[np.float32]\n        )\n\n        # block paramters\n\
      \        # NOTE: use decimated sample rate: samp_rate/decimation\n        self.sample_rate\
      \ = sample_rate\n        self.tolerance = tolerance\n\n        # messaging port\n\
      \        self.message_port_register_out(pmt.intern('msg_out'))\n\n        #\
      \ timing tolerance value, if the sampled frame is\n        # slightly shorter/longer\
      \ hant the defined duration\n        self._tolerance = self.sample_rate*self.tolerance\n\
      \n        # 0.1s of zeros for the zero-bit (100ms pause)\n        self._zero_lo\
      \ = self.sample_rate*0.1 - self._tolerance\n        self._zero_hi = self.sample_rate*0.1\
      \ + self._tolerance\n\n        # 0.9s of ones for the zero-bit\n        self._zero_compl_lo\
      \ = self.sample_rate*0.9 - self._tolerance\n        self._zero_compl_hi = self.sample_rate*0.9\
      \ + self._tolerance\n\n        # 0.2s of zeros for the one-bit (200ms pause)\n\
      \        self._one_lo = self.sample_rate*0.2 - self._tolerance\n        self._one_hi\
      \ = self.sample_rate*0.2 + self._tolerance\n\n        # 0.8s of ones for the\
      \ one-bit\n        self._one_compl_lo = self.sample_rate*0.8 - self._tolerance\n\
      \        self._one_compl_hi = self.sample_rate*0.8 + self._tolerance\n\n   \
      \     # 1.9s of ones for the zero-bit at position 58 (with prolonged ones)\n\
      \        self._reinit_zero_lo = self.sample_rate*1.9 - 2*self._tolerance\n \
      \       self._reinit_zero_hi = self.sample_rate*1.9 + 2*self._tolerance\n\n\
      \        # 1.8s of ones for the one-bit at position 58 (with prolonged ones)\n\
      \        self._reinit_one_lo = self.sample_rate*1.8 - 2*self._tolerance\n  \
      \      self._reinit_one_hi = self.sample_rate*1.8 + 2*self._tolerance\n\n  \
      \      print(\"zero\", (self._zero_hi + self._zero_lo)/2)\n        print(\"\
      zero_comp\", (self._zero_compl_hi + self._zero_compl_lo)/2)\n        print(\"\
      one\", (self._one_hi + self._one_lo)/2)\n        print(\"one_comp\", (self._one_compl_hi\
      \ + self._one_compl_lo)/2)\n        print(\"zero_reinit\", (self._reinit_zero_hi\
      \ + self._reinit_zero_lo)/2)\n        print(\"one_reinit\", (self._reinit_one_hi\
      \ + self._reinit_one_lo)/2)\n\n    def work(self, input_items, output_items):\n\
      \        inp = input_items[0]\n        out = output_items[0]\n\n        out[:]\
      \ = self.extract_bits(inp)\n\n        # forward input tagged signal\n      \
      \  return len(out)\n\n    def extract_bits(self, inp):\n        global _in_sync\n\
      \        global _num_ones\n        global _num_zeros\n\n        out = inp\n\n\
      \        # Process the individual (finite length) stream block\n        # currently\
      \ received. The synchronization and detection process\n        # is basically\
      \ modelled by a finite state. machine\n        for idx, ch in enumerate(inp):\n\
      \            # increment current counters of zeros and ones correspondingly\n\
      \            if (ch == 1):\n                _num_ones += 1\n            else:\
      \   # ch == 0\n                _num_zeros += 1\n\n            # first step of\
      \ synchronization,\n            # as soon as an edge\n            # from zero\
      \ to one is detected\n            if (_in_sync == 0 and ch == 0):\n        \
      \        _in_sync = -1\n                _num_zeros = 1\n                _num_ones\
      \ = 0\n\n                key = pmt.intern(\"\")\n                value = pmt.intern(f\"\
      0 => -1 {_num_zeros}, {_num_ones}\")\n                self.add_item_tag(0,\n\
      \                                  self.nitems_written(0) + idx,\n         \
      \                         key,\n                                  value)\n\n\
      \            # do not (yet) synchronize if there\n            # is no edge from\
      \ zero to one yet\n            elif (_in_sync == 0 and ch == 1):\n         \
      \       # thus keep _in_sync_ = 0\n                pass\n\n            # second\
      \ step of synchronization succeeds,\n            # as soon as an edge from one\
      \ to zero is\n            # detected during state -1, given that the\n     \
      \       # length of zeros fits to parts of the\n            # zero/one symbols\
      \ correspondingly\n            if (_in_sync == -1 and ch == 1 and\n        \
      \            ((_num_zeros > self._zero_lo and\n                      _num_zeros\
      \ < self._zero_hi) or\n                     (_num_zeros > self._one_lo and\n\
      \                      _num_zeros < self._one_hi))):\n                _in_sync\
      \ = -2\n                _num_zeros = 0\n                _num_ones = 1\n\n  \
      \              key = pmt.intern(\"\")\n                value = pmt.intern(f\"\
      -1 => -2  {_num_zeros}, {_num_ones}\")\n                self.add_item_tag(0,\n\
      \                                  self.nitems_written(0) + idx,\n         \
      \                         key,\n                                  value)\n\n\
      \            # second step of synchronization fails otherwise\n            elif\
      \ (_in_sync == -1 and ch == 1 and\n                    (_num_zeros < self._zero_lo\
      \ or\n                     _num_zeros > self._one_hi)):\n                _in_sync\
      \ = 0\n\n                key = pmt.intern(\"\")\n                value = pmt.intern(f\"\
      ERR: -1 => 0: {_num_zeros}, {_num_ones}\")\n                self.add_item_tag(0,\n\
      \                                  self.nitems_written(0) + idx,\n         \
      \                         key,\n                                  value)\n \
      \               _num_zeros = 0\n                _num_ones = 1\n\n          \
      \  # do not (yet) synchronize if there\n            # is no edge from zero to\
      \ one yet\n            elif (_in_sync == -1 and ch == 0):\n                pass\n\
      \n            # third (and last) step of synchronization succeeds,\n       \
      \     # as soon as an edge from one to zero is\n            # detected during\
      \ state -2, given that the\n            # length of ones fits to parts of the\n\
      \            # zero/one symbols correspondingly\n            if (_in_sync ==\
      \ -2 and ch == 0 and\n                    ((_num_ones > self._zero_compl_lo\
      \ and\n                      _num_ones < self._zero_compl_hi) or\n         \
      \            (_num_ones > self._one_compl_lo and\n                      _num_ones\
      \ < self._one_compl_hi))):\n                _in_sync = 1\n                _num_zeros\
      \ = 1\n                _num_ones = 0\n\n                key = pmt.intern(\"\"\
      )\n                value = pmt.intern(\"-2 => 1\")\n                self.add_item_tag(0,\n\
      \                                  self.nitems_written(0) + idx,\n         \
      \                         key,\n                                  value)\n\n\
      \            # third (and last) step of synchronization fails otherwise\n  \
      \          elif (_in_sync == -2 and ch == 0 and\n                    ((_num_ones\
      \ < self._zero_compl_lo or\n                      _num_ones > self._one_compl_hi)\
      \ or\n                     (_num_ones > self._zero_compl_hi and\n          \
      \            _num_ones < self._one_compl_lo))):\n                _in_sync =\
      \ -1\n                _num_zeros = 1\n                _num_ones = 0\n\n    \
      \            key = pmt.intern(\"\")\n                value = pmt.intern(f\"\
      ERR: -2 => -1: {_num_zeros}, {_num_ones}\")\n                self.add_item_tag(0,\n\
      \                                  self.nitems_written(0) + idx,\n         \
      \                         key,\n                                  value)\n\n\
      \            # do not (yet) synchronize if there\n            # is no edge from\
      \ one to zero yet\n            elif (_in_sync == -2 and ch == 1):\n        \
      \        pass\n\n            # sync on rising edge is successful\n         \
      \   # so far it is either a zero or a one symbol\n            if (_in_sync ==\
      \ 1 and ch == 1 and\n                    ((_num_zeros > self._zero_lo and\n\
      \                      _num_zeros < self._zero_hi) or\n                    \
      \ (_num_zeros > self._one_lo and\n                      _num_zeros < self._one_hi))):\n\
      \                _in_sync = 2\n                _num_ones = 1\n\n           \
      \     key = pmt.intern(\"\")\n                value = pmt.intern(f\"1 => 2 {_num_zeros},\
      \ {_num_ones}\")\n                self.add_item_tag(0,\n                   \
      \               self.nitems_written(0) + idx,\n                            \
      \      key,\n                                  value)\n\n            # detect\
      \ zero bit on falling edge at each end of the symbol frame\n            if (_in_sync\
      \ == 2 and ch == 0):\n\n                # detect a zero bit, if approx 0.1sec\
      \ zeros and 0.9sec ones\n                # (in that order) with slight tolerances\
      \ are detected\n                if (_num_zeros > self._zero_lo and\n       \
      \                 _num_zeros < self._zero_hi and\n                        _num_ones\
      \ > self._zero_compl_lo and\n                        _num_ones < self._zero_compl_hi):\n\
      \n                    # reset counters to zero\n                    _num_ones\
      \ = 0\n                    _num_zeros = 1\n\n                    _in_sync =\
      \ 1\n\n                    key = pmt.intern(\"\")\n                    value\
      \ = pmt.intern(\"2 => 1: BIT ZERO\")\n                    self.add_item_tag(0,\n\
      \                                      self.nitems_written(0) + idx,\n     \
      \                                 key,\n                                   \
      \   value)\n\n                    # detected 0 bit\n                    self.message_port_pub(pmt.intern(\"\
      msg_out\"),\n                                          pmt.intern(\"0\"))\n\n\
      \                # detect a one bit, if approx 0.2sec zeros and 0.8sec ones\n\
      \                # (in that order) with slight tolerances are detected\n   \
      \             elif (_num_zeros > self._one_lo and\n                      _num_zeros\
      \ < self._one_hi and\n                      _num_ones > self._one_compl_lo and\n\
      \                      _num_ones < self._one_compl_hi):\n\n                \
      \    # reset counters to zero\n                    _num_ones = 0\n         \
      \           _num_zeros = 1\n\n                    _in_sync = 1\n\n         \
      \           key = pmt.intern(\"\")\n                    value = pmt.intern(\"\
      2 => 1: BIT ONE\")\n                    self.add_item_tag(0,\n             \
      \                         self.nitems_written(0) + idx,\n                  \
      \                    key,\n                                      value)\n\n\
      \                    # detected 0 bit \n                    self.message_port_pub(pmt.intern(\"\
      msg_out\"),\n                                          pmt.intern(\"1\"))\n\n\
      \                # detect a zero bit and a new minute, if approx 0.1sec\n  \
      \              # zeros and 1.9sec ones (in that order) with slight\n       \
      \         # tolerances are detected\n                elif (_num_zeros > self._zero_lo\
      \ and\n                      _num_zeros < self._zero_hi and\n              \
      \        _num_ones > self._reinit_zero_lo and\n                      _num_ones\
      \ < self._reinit_zero_hi):\n\n                    # detected 0 bit\n       \
      \             msg = \"0\"\n                    self.message_port_pub(pmt.intern(\"\
      msg_out\"),\n                                          pmt.intern(msg))\n\n\
      \                    # detected new minute\n                    msg = \"2\"\n\
      \                    self.message_port_pub(pmt.intern(\"msg_out\"),\n      \
      \                                    pmt.intern(msg))\n                    #\
      \ reset counters to zero\n                    _num_ones = 0\n              \
      \      _num_zeros = 1\n\n                    _in_sync = 1\n\n              \
      \      key = pmt.intern(\"\")\n                    value = pmt.intern(\"2 =>\
      \ 1: NEW MIN\")\n                    self.add_item_tag(0,\n                \
      \                      self.nitems_written(0) + idx,\n                     \
      \                 key,\n                                      value)\n\n   \
      \             # detect a one bit and a new minute, if approx 0.2sec\n      \
      \          # zeros and 1.8sec ones (in that order) with slight\n           \
      \     # tolerances are detected\n                elif (_num_zeros > self._one_lo\
      \ and\n                      _num_zeros < self._one_hi and\n               \
      \       _num_ones > self._reinit_one_lo and\n                      _num_ones\
      \ < self._reinit_one_hi):\n\n                    # detected one bit\n      \
      \              msg = \"1\"\n                    self.message_port_pub(pmt.intern(\"\
      msg_out\"),\n                                          pmt.intern(msg))\n\n\
      \                    # detected new minute\n                    msg = \"2\"\n\
      \                    self.message_port_pub(pmt.intern(\"msg_out\"),\n      \
      \                                    pmt.intern(msg))\n\n                  \
      \  # reset counters to zero\n                    _num_ones = 0\n           \
      \         _num_zeros = 1\n\n                    _in_sync = 1\n\n           \
      \         key = pmt.intern(\"\")\n                    value = pmt.intern(\"\
      2 => 1: NEW MIN\")\n                    self.add_item_tag(0,\n             \
      \                         self.nitems_written(0) + idx,\n                  \
      \                    key,\n                                      value)\n\n\
      \            elif (_in_sync == 2 and ch == 1):\n                pass\n\n   \
      \     # detect and treat the case when sync is apparently lost\n        # and\
      \ the counters start to overload\n        if (_num_zeros > self._one_hi*2 or\n\
      \                _num_zeros > self._reinit_one_hi*2):\n            msg = \"\
      ERROR\"\n            self.message_port_pub(pmt.intern(\"msg_out\"),\n      \
      \                            pmt.intern(f\"({msg}), zeros:\"\n             \
      \                                f\"{_num_zeros},\"\n                      \
      \                       f\" ones: {_num_ones}\"))\n\n            # trigger a\
      \ re-sync\n            _in_sync = 0\n\n            # reset all counters to zero\n\
      \            _num_ones = 0\n            _num_zeros = 1\n\n            key =\
      \ pmt.intern(\"\")\n            value = pmt.intern(\"2 => -1: ERROR\")\n   \
      \         self.add_item_tag(0,\n                              self.nitems_written(0)\
      \ + idx,\n                              key,\n                             \
      \ value)\n\n        # return (float) signal block\n        return out\n"
    affinity: ''
    alias: ''
    comment: 'syncs to falling edge

      * decodes 0, 0.1sec zero and 0.9sec one

      * decodes 1, 0.2sec zero and 0.8sec one

      * decodes new minute if 1,8 or 1,9sec one'
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: int(samp_rate/decimation)
    tolerance: '0.02'
  states:
    _io_cache: ('DCF77\nBit Detector', 'DCF77_BitDetector_blk', [('sample_rate', '48000'),
      ('tolerance', '0.02')], [('0', 'float', 1)], [('0', 'float', 1), ('msg_out',
      'message', 1)], '', ['sample_rate', 'tolerance'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 1160.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: Windows needs the import of zmq
    imports: import zmq
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 72.0]
    rotation: 0
    state: true
- name: network_tcp_source_1
  id: network_tcp_source
  parameters:
    addr: 127.0.0.1
    affinity: ''
    alias: ''
    comment: 'This block takes the DCF77

      signal from a simulated

      Channel at 77.5 kHz.

      (both amplitude and phase

      modulated)'
    maxoutbuf: '0'
    minoutbuf: '0'
    port: '55554'
    server: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 644.0]
    rotation: 0
    state: disabled
- name: osmosdr_source_0
  id: osmosdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: airspyhf=0
    bb_gain0: '0'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: '4000'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: 'frame is localized on the

      center frequency of the

      DCF77 signal'
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: freq_DCF77
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '30'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '30'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 236.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: '2000'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '77500'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"unfiltered received signal frequency"'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 228.0]
    rotation: 0
    state: disabled
- name: qtgui_freq_sink_x_1
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: '2000'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '77500'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"filtered complex passband signal frequency"'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-180'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1496, 188.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: 'view the noisy input signal

      to set the thresholds properly'
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: (3,0,1,1)
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: samp_rate*5
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.025'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: hi_thres + 80
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1176, 812.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_1
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: 'Check if the output bitstream

      is tagged properly at the edges'
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: (4,0,1,1)
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: decoded_DCF77_bits
    nconnections: '1'
    size: samp_rate
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.01'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1.25'
    ymin: '-0.25'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 1132.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_2
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: received complex passband signal
    nconnections: '1'
    size: samp_rate*4
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.025'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '2'
    ymin: '-2'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1496, 332.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: 'Apply downsampling to

      reduce computations on

      total number of samples'
    decim: decimation
    fbw: '0'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: ''
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1496, 460.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_1
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: 'for correct timing-display

      the previous down-sampled/decimated

      signal must be upsampled/interpolated again'
    decim: '1'
    fbw: '0'
    interp: decimation
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 804.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1968, 488.0]
    rotation: 0
    state: true
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 1040.0]
    rotation: 0
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [96, 1040.0]
    rotation: 0
    state: true
- name: virtual_source_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [96, 1176.0]
    rotation: 0
    state: enabled
- name: zeromq_push_msg_sink_1
  id: zeromq_push_msg_sink
  parameters:
    address: tcp://127.0.0.1:55555
    affinity: ''
    alias: ''
    bind: 'True'
    comment: 'provide signal to a ZMQ-server

      to further decode the bits

      to human-readible

      date & time information'
    timeout: '500'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 1280.0]
    rotation: 0
    state: enabled

connections:
- [analog_simple_squelch_cc_0, '0', qtgui_freq_sink_x_1, '0']
- [analog_simple_squelch_cc_0, '0', qtgui_time_sink_x_2, '0']
- [analog_simple_squelch_cc_0, '0', rational_resampler_xxx_0, '0']
- [blocks_complex_to_mag_squared_0, '0', audio_sink_0, '0']
- [blocks_complex_to_mag_squared_0, '0', rational_resampler_xxx_1, '0']
- [blocks_complex_to_mag_squared_0, '0', virtual_sink_1, '0']
- [blocks_multiply_const_vxx_0, '0', freq_xlating_fir_filter_xxx_0_0, '0']
- [blocks_multiply_const_vxx_1, '0', analog_simple_squelch_cc_0, '0']
- [blocks_multiply_const_vxx_1_0, '0', virtual_sink_0, '0']
- [blocks_threshold_ff_0, '0', gr_bit_detector_DCF77, '0']
- [freq_xlating_fir_filter_xxx_0, '0', analog_simple_squelch_cc_0, '0']
- [freq_xlating_fir_filter_xxx_0_0, '0', blocks_multiply_const_vxx_1, '0']
- [gr_bit_detector_DCF77, '0', qtgui_time_sink_x_1, '0']
- [gr_bit_detector_DCF77, msg_out, blocks_message_debug_0, print]
- [gr_bit_detector_DCF77, msg_out, zeromq_push_msg_sink_1, in]
- [network_tcp_source_1, '0', freq_xlating_fir_filter_xxx_0, '0']
- [osmosdr_source_0, '0', blocks_multiply_const_vxx_0, '0']
- [osmosdr_source_0, '0', qtgui_freq_sink_x_0, '0']
- [rational_resampler_xxx_0, '0', blocks_multiply_const_vxx_1_0, '0']
- [rational_resampler_xxx_1, '0', qtgui_time_sink_x_0, '0']
- [virtual_source_0, '0', blocks_complex_to_mag_squared_0, '0']
- [virtual_source_1, '0', blocks_threshold_ff_0, '0']

metadata:
  file_format: 1
