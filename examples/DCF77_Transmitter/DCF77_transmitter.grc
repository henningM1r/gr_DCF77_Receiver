options:
  parameters:
    author: henningM1R
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: DCF77_Transmitter
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: DCF77 Transmitter
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 8.0]
    rotation: 0
    state: enabled

blocks:
- name: freq_DCF77
  id: variable
  parameters:
    comment: ''
    value: '77500'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 12.0]
    rotation: 0
    state: true
- name: gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: (0,0)
    label: Gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.01'
    step: '0.01'
    stop: '3'
    value: '0.072'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 8.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: int(192000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 12.0]
    rotation: 0
    state: enabled
- name: analog_const_source_x_0
  id: analog_const_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1224, 364.0]
    rotation: 0
    state: true
- name: analog_sig_source_x_2
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: 'modulate pass band signal

      to 77.5 kHz'
    freq: '77500'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: '192000'
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1448, 140.0]
    rotation: 0
    state: true
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 200.0]
    rotation: 0
    state: enabled
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 316.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1456, 304.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_xx_0
  id: blocks_multiply_const_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: gain
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1208, 300.0]
    rotation: 0
    state: true
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1704, 288.0]
    rotation: 0
    state: true
- name: blocks_repeat_0
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: 'each bit streches a number

      of "samp_rate" samples,

      i.e. fill one full second'
    interp: samp_rate
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 316.0]
    rotation: 0
    state: enabled
- name: blocks_tags_strobe_0_0_1
  id: blocks_tags_strobe
  parameters:
    affinity: ''
    alias: ''
    comment: set a tag each second
    key: pmt.intern("Second")
    maxoutbuf: '0'
    minoutbuf: '0'
    nsamps: samp_rate
    type: float
    value: pmt.intern("second")
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 180.0]
    rotation: 0
    state: enabled
- name: blocks_vector_source_x_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: 'test signal without a

      specific DCF77 encoding'
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[]'
    type: byte
    vector: (1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0)
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 188.0]
    rotation: 0
    state: disabled
- name: blocks_vector_source_x_0_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: 'example DCF77 encoded

      bit-stream (with random

      weather data bits)

      full length: must be 60 elements,

      the last element must be a 2'
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[]'
    type: byte
    vector: (0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,0,1,0,0,0,1,0,0,1,1,1,1,0,0,0,1,1,0,0,0,1,0,0,1,2)
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 300.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n\n\n# counted number of zero samples\n\
      _num_zeros = 0\n\n# counted number of one samples\n_num_ones = 0\n\n# counted\
      \ number of two samples\n_num_twos = 0\n\n# counted number of seconds\n_num_secs\
      \ = 0\n\n\nclass blk(gr.sync_block):\n\n    def __init__(self, scaling=1, samp_rate=768000):\n\
      \        \"\"\"arguments to this function show up as parameters in GRC\"\"\"\
      \n        gr.sync_block.__init__(\n            self,\n            name='DCF77-Signalling',\n\
      \            in_sig=[np.float32],\n            out_sig=[np.float32]\n      \
      \  )\n\n        # block parameters\n        self.scaling = scaling\n       \
      \ self.sample_rate = samp_rate\n\n        # messaging port\n        self.message_port_register_out(pmt.intern('msg_out'))\n\
      \        \n        # 0.1s of zeros for the zero-bit (100ms pause)\n        self._zero\
      \ = int(self.sample_rate/self.scaling*0.1)\n\n        # 0.9s of ones for the\
      \ zero-bit\n        self._zero_compl = int(self.sample_rate/self.scaling*0.9)\n\
      \n        # 0.2s of zeros for the one-bit (200ms pause)\n        self._one =\
      \ int(self.sample_rate/self.scaling*0.2)\n\n        # 0.8s of ones for the one-bit\n\
      \        self._one_compl = int(self.sample_rate/self.scaling*0.8)\n\n      \
      \  # 1.9s of ones for the zero-bit at position 58 (with prolonged ones)\n  \
      \      self._reinit_zero = int(self.sample_rate/self.scaling*1.9)\n\n      \
      \  # 1.8s of ones for the one-bit at position 58 (with prolonged ones)\n   \
      \     self._reinit_one = int(self.sample_rate/self.scaling*1.8)\n\n        print(\"\
      zero:\", self._zero)\n        print(\"zero_compl:\", self._zero_compl)\n   \
      \     print(\"one:\", self._one)\n        print(\"one_compl:\", self._one_compl)\n\
      \        print(\"reinit_zero:\", self._reinit_zero)\n        print(\"reinit_one:\"\
      , self._reinit_one)\n\n\n    def work(self, input_items, output_items):\n  \
      \      inp = input_items[0]\n        out = output_items[0]\n        \n     \
      \   tags = self.get_tags_in_window(0, 0, len(inp))\n\n        out[:] = self.bits_to_base_band_signal(inp)\n\
      \        \n        # forward input tagged signal\n        return len(output_items[0])\n\
      \   \n\n    def bits_to_base_band_signal(self, inp):\n        global _num_zeros\
      \        \n        global _num_ones\n        global _num_twos\n        global\
      \ _num_secs\n\n        # The total number of samples does not change from input\
      \ to output\n        # just the value might change \n        out = inp\n\n \
      \       #tags = self.get_tags_in_window(0, 0, len(inp))\n\n        # Process\
      \ the individual (finite length) stream block currently received.\n        #\
      \ Either a frame (sample_rate) full of ones, or a frame full of zeros is received.\n\
      \        for idx, ch in enumerate(inp):\n            # 1 is default, especially\
      \ for the 59th second\n            out[idx] = 1\n\n            if _num_secs\
      \ > 59: \n                _num_secs = 0\n            \n            # receiving\
      \ frame of zeros\n            if (ch == 0):\n                _num_zeros += 1\n\
      \                _num_ones = 0\n                _num_twos = 0     \n       \
      \             \n                # if the number of zeros is below 0.1s of the\
      \ frame\n                if (_num_zeros < self._zero and _num_secs < 59):\n\
      \                    # set the output to \"1\" for the current sample\n    \
      \                out[idx] = 0\n                \n                # if the number\
      \ of zeros is equal 0.1s of the frame\n                elif (_num_zeros == self._zero\
      \ and _num_secs < 59):\n                    # set output to \"0\" for the current\
      \ sample\n                    out[idx] = 0\n                        \n     \
      \               # set tag for this 100ms pause\n                    key = pmt.intern(\"\
      0\")\n                    value = pmt.intern(\"100ms\")\n                  \
      \  self.add_item_tag(0,\n                        self.nitems_written(0) + idx,\n\
      \                        key,\n                        value\n             \
      \       )\n            \n                # if the number of zeros is above 0.1s\
      \ of the frame\n                elif (_num_zeros > self._zero and _num_secs\
      \ < 59):\n                    # set output to \"1\" for the current sample\n\
      \                    out[idx] = 1\n               \n                # full second\
      \ from a full frame of zeros\n                if _num_zeros >= self.sample_rate:\n\
      \                    _num_zeros = 0\n                    _num_ones = 0\n   \
      \                 _num_twos = 0\n                    _num_secs += 1\n      \
      \              \n                    if _num_secs < 59:\n                  \
      \      # set tag for full second\n                        key = pmt.intern(\"\
      sec\")\n                        value = pmt.intern(\"0\")\n                \
      \        self.add_item_tag(0,\n                            self.nitems_written(0)\
      \ + idx,\n                            key,\n                            value\n\
      \                        )\n\n                    print(f\"{_num_secs:02d}:\
      \ 0\")\n\n            # receiving frame of ones\n            elif (ch == 1):\n\
      \                _num_ones += 1\n                _num_zeros = 0\n          \
      \      _num_twos = 0\n                    \n                # if the number\
      \ of ones is below 0.2s of the frame\n                if (_num_ones < self._one\
      \ and _num_secs < 59):\n                    # set the output to \"0\" for the\
      \ current sample\n                    out[idx] = 0\n\n                # if the\
      \ number of ones is equal 0.2s of the frame\n                elif (_num_ones\
      \ == self._one and _num_secs < 59):\n                    # set output to \"\
      0\" for the current sample\n                    out[idx] = 0\n             \
      \       # set tag for this 200ms pause\n                    key = pmt.intern(\"\
      1\")\n                    value = pmt.intern(\"200ms\")\n                  \
      \  self.add_item_tag(0,\n                        self.nitems_written(0) + idx,\n\
      \                        key,\n                        value\n             \
      \       )\n\n                # if the number of ones is above 0.2s of the frame\n\
      \                elif (_num_ones > self._one and _num_secs < 59):\n        \
      \            # set output to \"1\" for the current sample\n                \
      \    out[idx] = 1\n               \n                # full second from a full\
      \ frame of ones\n                if _num_ones >= self.sample_rate:\n       \
      \             _num_ones = 0\n                    _num_zeros = 0\n          \
      \          _num_twos = 0\n                    _num_secs += 1\n\n           \
      \         if _num_secs < 59:\n                        # set tag for full second\n\
      \                        key = pmt.intern(\"sec\")\n                       \
      \ value = pmt.intern(\"1\")\n                        self.add_item_tag(0,\n\
      \                            self.nitems_written(0) + idx,\n               \
      \             key,\n                            value\n                    \
      \    )\n\n                    print(f\"{_num_secs:02d}: 1\")\n\n           \
      \ # receiving frame of twos (=> 59th second)\n            elif (ch == 2):\n\
      \                _num_zeros = 0\n                _num_ones = 0\n           \
      \     \n                if _num_twos == 0:\n                    _num_secs +=\
      \ 1\n                    _num_twos += 1\n\n                    out[idx] = 1\n\
      \n                    print(f\"{_num_secs:02d}: _\")\n\n                elif\
      \ _num_twos >= 1 and _num_twos < self.sample_rate:\n                    _num_twos\
      \ += 1\n                    \n                    out[idx] = 1\n           \
      \         \n                elif _num_twos >= self.sample_rate:\n          \
      \          _num_twos = 0\n                    \n                    out[idx]\
      \ = 1\n        \n        # return (float) signal block\n        return out\n"
    affinity: ''
    alias: ''
    comment: "* encode bits to signals\n* each bit has a total signal\n   length of\
      \ \"samp_rate\"\n* convert 0 bit to:\n 100ms low (0) , 900ms high (1)\n* convert\
      \ 1 bit to:\n200ms low (0),  800ms high (1)"
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    scaling: '1'
  states:
    _io_cache: ('DCF77-Signalling', 'blk', [('scaling', '1'), ('samp_rate', '768000')],
      [('0', 'float', 1)], [('0', 'float', 1), ('msg_out', 'message', 1)], 'arguments
      to this function show up as parameters in GRC', ['scaling'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [912, 304.0]
    rotation: 0
    state: enabled
- name: network_tcp_sink_0
  id: network_tcp_sink
  parameters:
    addr: 127.0.0.1
    affinity: ''
    alias: ''
    comment: to the DCF77 channel
    mode: '2'
    port: '55553'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1904, 292.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: (4,0)
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: Modulated_DCF77_signal_frequency
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1904, 84.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: (3,0)
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: Modulated_DCF77_signal_time
    nconnections: '1'
    size: samp_rate*4
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '0.1'
    ymin: '-0.1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1904, 188.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: (1,0)
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: DCF77_bits
    nconnections: '1'
    size: samp_rate*4
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '2.5'
    ymin: '-0.5'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 188.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: (2,0)
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: Baseband_DCF77_signal
    nconnections: '1'
    size: samp_rate*4
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1.5'
    ymin: '-0.5'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1192, 180.0]
    rotation: 0
    state: enabled

connections:
- [analog_const_source_x_0, '0', blocks_float_to_complex_0, '1']
- [analog_sig_source_x_2, '0', blocks_multiply_xx_0, '0']
- [blocks_add_xx_0, '0', qtgui_time_sink_x_0_0, '0']
- [blocks_char_to_float_0, '0', blocks_repeat_0, '0']
- [blocks_float_to_complex_0, '0', blocks_multiply_xx_0, '1']
- [blocks_multiply_const_xx_0, '0', blocks_float_to_complex_0, '0']
- [blocks_multiply_xx_0, '0', network_tcp_sink_0, '0']
- [blocks_multiply_xx_0, '0', qtgui_freq_sink_x_0, '0']
- [blocks_multiply_xx_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_repeat_0, '0', blocks_add_xx_0, '1']
- [blocks_repeat_0, '0', epy_block_0, '0']
- [blocks_tags_strobe_0_0_1, '0', blocks_add_xx_0, '0']
- [blocks_vector_source_x_0, '0', blocks_char_to_float_0, '0']
- [blocks_vector_source_x_0_0, '0', blocks_char_to_float_0, '0']
- [epy_block_0, '0', blocks_multiply_const_xx_0, '0']
- [epy_block_0, '0', qtgui_time_sink_x_0_0_0, '0']

metadata:
  file_format: 1
